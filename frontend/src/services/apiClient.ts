import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import NetInfo from "@react-native-community/netinfo";
import { config } from "../config/config";
import { API_CONFIG } from "../env.config";
import { Platform } from "react-native";

// Danh s√°ch c√°c ƒë·ªãa ch·ªâ IP d·ª± ph√≤ng ƒë·ªÉ th·ª≠ k·∫øt n·ªëi
const FALLBACK_IPS = [
  API_CONFIG.API_URL, // Th·ª≠ URL t·ª´ env config tr∆∞·ªõc
  config.api.baseUrl, // Th·ª≠ URL t·ª´ config
  "http://localhost:3002",
  "http://127.0.0.1:3002",
  "http://10.0.2.2:3002", // ƒê·ªãa ch·ªâ localhost cho Android Emulator
  "http://192.168.2.15:3003",
];

// L·∫•y API URL ƒë√£ l∆∞u t·ª´ AsyncStorage
const getStoredApiUrl = async () => {
  try {
    const url = await AsyncStorage.getItem("api_url");
    if (url) {
      console.log("üîç ƒê√£ l·∫•y API URL t·ª´ storage:", url);
      return url;
    }
    return null;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y API URL t·ª´ storage:", error);
    return null;
  }
};

// L∆∞u API URL v√†o AsyncStorage
const saveApiUrl = async (url: string) => {
  try {
    await AsyncStorage.setItem("api_url", url);
    console.log("‚úÖ ƒê√£ l∆∞u API URL:", url);
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u API URL:", error);
    return false;
  }
};

// ƒê·ªìng b·ªô v·ªõi c·∫•u h√¨nh t·ª´ apiService ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ c√°c g·ªçi API ƒë·ªÅu s·ª≠ d·ª•ng c√πng URL base
const getApiUrl = () => {
  // ∆Øu ti√™n s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng API_URL n·∫øu c√≥
  if (process.env.API_URL) {
    console.log("üîç S·ª≠ d·ª•ng API_URL t·ª´ .env:", process.env.API_URL);
    return process.env.API_URL;
  }

  // S·ª≠ d·ª•ng URL t·ª´ config ho·∫∑c d√πng URL fallback n·∫øu kh√¥ng c√≥
  const url = config.api.baseUrl || "http://192.168.2.5:3002";
  console.log("üîç API URL from config:", url);
  return url;
};

// Kh·ªüi t·∫°o v·ªõi URL m·∫∑c ƒë·ªãnh, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
const API_URL = getApiUrl();
console.log("üîç API URL hi·ªán t·∫°i (apiClient):", API_URL);
const token = AsyncStorage.getItem("token");

console.log("token: ", token);

// T·∫°o instance axios v·ªõi c·∫•u h√¨nh chung
const apiClient = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
    Authorization: `Bearer ${token}`,
  },
  timeout: config.api.timeout,
});

// Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn server v·ªõi caching ƒë·ªÉ tr√°nh g·ªçi li√™n t·ª•c
let lastConnectionCheck = 0;
let lastConnectionResult = false;
const CONNECTION_CHECK_INTERVAL = 30000; // 30 seconds

const checkServerConnection = async (url: string): Promise<boolean> => {
  try {
    // Ki·ªÉm tra n·∫øu ƒë√£ ki·ªÉm tra g·∫ßn ƒë√¢y, tr·∫£ v·ªÅ k·∫øt qu·∫£ tr∆∞·ªõc ƒë√≥
    const now = Date.now();
    if (now - lastConnectionCheck < CONNECTION_CHECK_INTERVAL) {
      console.log(
        "üì° Using cached connection check result:",
        lastConnectionResult
      );
      return lastConnectionResult;
    }

    const response = await axios.get(`${url}/api/health`, {
      timeout: 3000,
    });

    // C·∫≠p nh·∫≠t cache
    lastConnectionCheck = now;
    lastConnectionResult = response.status === 200 || response.status === 401;

    return lastConnectionResult;
  } catch (error: any) {
    if (error.response && error.response.status === 401) {
      // C·∫≠p nh·∫≠t cache
      lastConnectionCheck = Date.now();
      lastConnectionResult = true;
      return true; // 401 v·∫´n l√† k·∫øt n·ªëi th√†nh c√¥ng, ch·ªâ l√† ch∆∞a x√°c th·ª±c
    }

    // C·∫≠p nh·∫≠t cache
    lastConnectionCheck = Date.now();
    lastConnectionResult = false;
    return false;
  }
};

// Th·ª≠ k·∫øt n·ªëi v·ªõi t·∫•t c·∫£ c√°c IP d·ª± ph√≤ng - c√≥ caching
let cachedWorkingUrl: string | null = null;

const tryFallbackIps = async (): Promise<string | null> => {
  // N·∫øu ƒë√£ c√≥ URL cached v√† ch∆∞a qu√° th·ªùi gian cache
  if (
    cachedWorkingUrl &&
    Date.now() - lastConnectionCheck < CONNECTION_CHECK_INTERVAL
  ) {
    console.log(`üì° Using cached working URL: ${cachedWorkingUrl}`);
    return cachedWorkingUrl;
  }

  console.log("üîÑ ƒêang th·ª≠ k·∫øt n·ªëi v·ªõi c√°c ƒë·ªãa ch·ªâ IP d·ª± ph√≤ng...");

  // Th·ª≠ v·ªõi URL ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥
  const storedUrl = await getStoredApiUrl();
  if (storedUrl) {
    console.log(`üîÑ Th·ª≠ k·∫øt n·ªëi v·ªõi URL ƒë√£ l∆∞u: ${storedUrl}`);
    if (await checkServerConnection(storedUrl)) {
      console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi ${storedUrl}`);
      cachedWorkingUrl = storedUrl;
      return storedUrl;
    }
  }

  // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng URL th·ª≠ c√πng l√∫c ƒë·ªÉ tr√°nh qu√° t·∫£i
  const priorityIPs = FALLBACK_IPS.slice(0, 3);

  // Th·ª≠ c√°c ƒë·ªãa ch·ªâ ∆∞u ti√™n tr∆∞·ªõc
  for (const ip of priorityIPs) {
    console.log(`üîÑ Th·ª≠ k·∫øt n·ªëi v·ªõi IP ∆∞u ti√™n: ${ip}`);
    if (await checkServerConnection(ip)) {
      console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi ${ip}`);
      saveApiUrl(ip);
      cachedWorkingUrl = ip;
      return ip;
    }
  }

  console.error("‚ùå T·∫•t c·∫£ c√°c IP ∆∞u ti√™n ƒë·ªÅu th·∫•t b·∫°i");
  cachedWorkingUrl = null;
  return null;
};

// Kh·ªüi t·∫°o API client v√† th·ª≠ k·∫øt n·ªëi
const initializeApiClient = async () => {
  try {
    // ƒê·∫ßu ti√™n, th·ª≠ l·∫•y URL t·ª´ storage (ƒë√£ ƒë∆∞·ª£c l∆∞u b·ªüi apiService)
    const storedUrl = await getStoredApiUrl();
    if (storedUrl) {
      console.log(`üîç Th·ª≠ URL ƒë√£ l∆∞u: ${storedUrl}`);
      // Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi s·ª≠ d·ª•ng
      if (await checkServerConnection(storedUrl)) {
        console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi URL ƒë√£ l∆∞u: ${storedUrl}`);
        apiClient.defaults.baseURL = storedUrl;
        return;
      } else {
        console.log(`‚ùå URL ƒë√£ l∆∞u kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c: ${storedUrl}`);
      }
    }

    // Ti·∫øp theo, th·ª≠ k·∫øt n·ªëi v·ªõi URL hi·ªán t·∫°i
    console.log(`üîç Th·ª≠ URL hi·ªán t·∫°i: ${API_URL}`);
    if (await checkServerConnection(API_URL)) {
      console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi URL m·∫∑c ƒë·ªãnh: ${API_URL}`);
      saveApiUrl(API_URL); // L∆∞u l·∫°i URL th√†nh c√¥ng
      return;
    }

    // Cu·ªëi c√πng, th·ª≠ v·ªõi t·∫•t c·∫£ c√°c IP d·ª± ph√≤ng
    console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi URL m·∫∑c ƒë·ªãnh, th·ª≠ c√°c IP d·ª± ph√≤ng");
    const workingUrl = await tryFallbackIps();

    if (workingUrl) {
      // C·∫≠p nh·∫≠t baseURL cho apiClient
      apiClient.defaults.baseURL = workingUrl;
      console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t baseURL th√†nh: ${workingUrl}`);
      saveApiUrl(workingUrl);
    } else {
      console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn b·∫•t k·ª≥ ƒë·ªãa ch·ªâ n√†o!");
    }
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi t·∫°o API client:", error);
  }
};

// Ch·∫°y qu√° tr√¨nh kh·ªüi t·∫°o
initializeApiClient();

// Th√™m interceptor cho request ƒë·ªÉ t·ª± ƒë·ªông th√™m token x√°c th·ª±c
apiClient.interceptors.request.use(
  async (config) => {
    try {
      // Add detailed logging for auth requests
      if (config.url?.includes("/auth/")) {
        console.log(
          `üîê Auth Request: ${config.method?.toUpperCase()} ${config.url}`,
          {
            data: config.data
              ? JSON.stringify(config.data).substring(0, 100) + "..."
              : "No data",
            headers: config.headers,
          }
        );
      }

      // Try to get token - check multiple possible storage keys
      let token = null;

      // First try the config.auth.tokenKey if available
      token = await AsyncStorage.getItem("token");

      if (!token) {
        console.log(
          "Token not found in primary storage, checking alternatives"
        );
        // Try alternative storage keys
        const userId = await AsyncStorage.getItem("userId");
        if (userId) {
          console.log("Found userId, token should be available");
        }
      }

      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log("‚úÖ Added token to request headers");
      } else {
        if (
          config.url &&
          (config.url.includes("/auth/login") ||
            config.url.includes("/auth/register"))
        ) {
          console.log("üîë Auth request - no token needed");
        } else {
          console.warn("‚ö†Ô∏è No token found in AsyncStorage");
        }
      }
    } catch (error) {
      console.error("‚ùå Error getting token:", error);
    }
    return config;
  },
  (error) => {
    console.error("‚ùå Request interceptor error:", error);
    return Promise.reject(error);
  }
);

// Th√™m interceptor cho response ƒë·ªÉ x·ª≠ l√Ω l·ªói
apiClient.interceptors.response.use(
  (response) => {
    console.log("‚úÖ Response th√†nh c√¥ng (apiClient):", {
      url: response.config.url,
      method: response.config.method,
      status: response.status,
    });

    // Log detailed data for debugging when getting transactions
    if (response.config.url?.includes("/transactions")) {
      console.log("üßæ Transaction response data structure:", {
        hasData: !!response.data,
        dataType: typeof response.data,
        isArray: Array.isArray(response.data),
        hasTransactionsByDate:
          response.data && response.data.transactionsByDate ? true : false,
        dataKeys: response.data ? Object.keys(response.data) : [],
        count: Array.isArray(response.data)
          ? response.data.length
          : response.data?.transactionsByDate
          ? response.data.transactionsByDate.length
          : "not applicable",
        // If it's a transaction response, log a sample
        sample:
          Array.isArray(response.data) && response.data.length > 0
            ? response.data[0]
            : response.data?.transactionsByDate?.length > 0
            ? {
                date: response.data.transactionsByDate[0].date,
                transactionCount:
                  response.data.transactionsByDate[0].transactions?.length,
              }
            : "no sample available",
      });
    }

    return response;
  },
  async (error) => {
    // Ki·ªÉm tra tr·∫°ng th√°i l·ªói 401 (Unauthorized) - token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
    if (error.response && error.response.status === 401) {
      try {
        // X√≥a token v√† th√¥ng tin ng∆∞·ªùi d√πng
        await AsyncStorage.multiRemove(["token", "user"]);
      } catch (e) {
        console.error("Error removing auth data:", e);
      }
    }

    // X·ª≠ l√Ω l·ªói m·∫°ng v√† th·ª≠ k·∫øt n·ªëi l·∫°i v·ªõi c√°c IP d·ª± ph√≤ng
    if (error.message === "Network Error" || !error.response) {
      console.log("‚ö†Ô∏è L·ªói m·∫°ng, th·ª≠ k·∫øt n·ªëi l·∫°i v·ªõi c√°c IP d·ª± ph√≤ng");

      try {
        // L∆∞u l·∫°i request g·ªëc
        const originalRequest = error.config;

        // Th·ª≠ v·ªõi c√°c IP d·ª± ph√≤ng
        const workingUrl = await tryFallbackIps();
        if (workingUrl) {
          // C·∫≠p nh·∫≠t baseURL cho apiClient
          apiClient.defaults.baseURL = workingUrl;
          console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t baseURL th√†nh: ${workingUrl}`);

          // C·∫≠p nh·∫≠t baseURL cho request g·ªëc
          originalRequest.baseURL = workingUrl;

          // Th√¥ng b√°o cho ng∆∞·ªùi d√πng
          console.log(
            `üîÑ Th·ª≠ l·∫°i request v·ªõi URL m·ªõi: ${originalRequest.baseURL}${originalRequest.url}`
          );

          // Th·ª≠ l·∫°i request v·ªõi URL m·ªõi
          return axios(originalRequest);
        } else {
          console.error("‚ùå Kh√¥ng t√¨m th·∫•y URL ho·∫°t ƒë·ªông n√†o!");
        }
      } catch (fallbackError) {
        console.error("‚ùå L·ªói khi th·ª≠ k·∫øt n·ªëi l·∫°i:", fallbackError);
      }
    }

    console.error("‚ùå Response error (apiClient):", {
      url: error.config?.url,
      method: error.config?.method,
      status: error.response?.status,
      data: error.response?.data,
    });

    return Promise.reject(error);
  }
);

export default apiClient;
