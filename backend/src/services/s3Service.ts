import fs from "fs";
import path from "path";
import { v4 as uuidv4 } from "uuid";

// Th∆∞ m·ª•c uploads
const uploadsDir = path.join(__dirname, "../../uploads");
const avatarsDir = path.join(uploadsDir, "avatars");

// ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
  console.log("‚úÖ [s3Service] ƒê√£ t·∫°o th∆∞ m·ª•c uploads");
}

if (!fs.existsSync(avatarsDir)) {
  fs.mkdirSync(avatarsDir, { recursive: true });
  console.log("‚úÖ [s3Service] ƒê√£ t·∫°o th∆∞ m·ª•c avatars");
}

// Upload file v√†o th∆∞ m·ª•c c·ª•c b·ªô thay v√¨ S3
export const uploadFileToS3 = async (
  fileBuffer: Buffer,
  fileName: string,
  contentType: string
): Promise<string> => {
  try {
    console.log(`üîç [s3Service] ƒêang l∆∞u file ${fileName} v√†o th∆∞ m·ª•c local`);

    // T·∫°o t√™n file duy nh·∫•t
    const uniqueFileName = `${Date.now()}-${uuidv4()}-${fileName}`;
    const filePath = path.join(
      contentType.includes("image") ? avatarsDir : uploadsDir,
      uniqueFileName
    );

    // Ghi file
    fs.writeFileSync(filePath, fileBuffer);
    console.log(`‚úÖ [s3Service] L∆∞u file th√†nh c√¥ng: ${filePath}`);

    // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ d√πng l√†m key
    return `uploads/${
      contentType.includes("image") ? "avatars/" : ""
    }${uniqueFileName}`;
  } catch (error) {
    console.error("‚ùå [s3Service] L·ªói khi l∆∞u file:", error);
    throw new Error("Kh√¥ng th·ªÉ l∆∞u file");
  }
};

// L·∫•y URL ƒë∆°n gi·∫£n thay v√¨ signed URL
export const getSignedFileUrl = async (
  key: string,
  expiresIn = 3600
): Promise<string> => {
  try {
    console.log(`üîç [s3Service] T·∫°o URL cho file: ${key}`);

    // Tr·∫£ v·ªÅ URL t∆∞∆°ng ƒë·ªëi
    return `/uploads/${key.replace("uploads/", "")}`;
  } catch (error) {
    console.error("‚ùå [s3Service] L·ªói khi t·∫°o URL:", error);
    throw new Error("Kh√¥ng th·ªÉ t·∫°o URL truy c·∫≠p file");
  }
};

// X√≥a file t·ª´ th∆∞ m·ª•c c·ª•c b·ªô
export const deleteFileFromS3 = async (key: string): Promise<void> => {
  try {
    console.log(`üîç [s3Service] X√≥a file: ${key}`);

    const filePath = path.join(__dirname, "../../", key);

    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log(`‚úÖ [s3Service] X√≥a file th√†nh c√¥ng: ${filePath}`);
    } else {
      console.log(`‚ö†Ô∏è [s3Service] File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
    }
  } catch (error) {
    console.error("‚ùå [s3Service] L·ªói khi x√≥a file:", error);
    throw new Error("Kh√¥ng th·ªÉ x√≥a file");
  }
};

// Upload file t·ª´ ƒë∆∞·ªùng d·∫´n local
export const uploadLocalFileToS3 = async (
  filePath: string,
  contentType: string
): Promise<string> => {
  try {
    const fileContent = fs.readFileSync(filePath);
    const fileName = path.basename(filePath);

    return await uploadFileToS3(fileContent, fileName, contentType);
  } catch (error) {
    console.error("‚ùå [s3Service] L·ªói khi upload file local:", error);
    throw new Error("Kh√¥ng th·ªÉ upload file t·ª´ local");
  }
};

// Li·ªát k√™ c√°c file trong th∆∞ m·ª•c
export const listFilesInFolder = async (prefix: string): Promise<string[]> => {
  try {
    console.log(`üîç [s3Service] Li·ªát k√™ files trong th∆∞ m·ª•c: ${prefix}`);

    const dirPath = path.join(uploadsDir, prefix);

    if (!fs.existsSync(dirPath)) {
      return [];
    }

    const files = fs
      .readdirSync(dirPath)
      .map((file) => `uploads/${prefix}/${file}`);

    return files;
  } catch (error) {
    console.error("‚ùå [s3Service] L·ªói khi li·ªát k√™ files:", error);
    throw new Error("Kh√¥ng th·ªÉ li·ªát k√™ files");
  }
};

// Mock function cho initializeS3Bucket
export const initializeS3Bucket = async () => {
  console.log(
    "‚úÖ [s3Service] Kh√¥ng c·∫ßn kh·ªüi t·∫°o S3 bucket - s·ª≠ d·ª•ng local storage"
  );
  return true;
};
